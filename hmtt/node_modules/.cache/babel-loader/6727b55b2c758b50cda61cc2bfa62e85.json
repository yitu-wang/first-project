{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/\\u5C0F\\u738B/Desktop/heimamm/hmtt/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/\\u5C0F\\u738B/Desktop/heimamm/hmtt/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.replace-all.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.json.stringify.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { suggestListAPI } from \"@/api/index.js\";\nimport router from '@/router';\nexport default {\n  data: function data() {\n    return {\n      kw: '',\n      //搜索关键词\n      timer: null,\n      //定时器\n      keywordList: [],\n      //关键词联想数组\n      history: JSON.parse(localStorage.getItem('his')) || [] //利用json转换为数组对象格式\n\n    };\n  },\n  methods: {\n    //搜索框输入方法\n    inputFn: function inputFn() {\n      var _this = this;\n\n      //防抖(设置定时器，然后每次触发时清除定时器)\n      clearTimeout(this.timer);\n      this.timer = setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _yield$suggestListAPI, res;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(_this.kw.length === 0)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                _context.next = 4;\n                return suggestListAPI({\n                  keyword: _this.kw\n                });\n\n              case 4:\n                _yield$suggestListAPI = _context.sent;\n                res = _yield$suggestListAPI.data;\n                _this.keywordList = res.data.options;\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      })), 300);\n    },\n    //处理关键词高亮\n    lightFn: function lightFn(str, target) {\n      //str是原来的字符串\n      //target是关键字\n      //变量不能直接放入正则表达式中，需要新建正则实例\n      var reg = new RegExp(target, 'ig');\n      return str.replaceAll(reg, function (match) {\n        return \"<span style=\\\"color:red;\\\">\".concat(match, \"</span>\");\n      });\n    },\n    //搜索事件\n    searchFn: function searchFn() {\n      var _this2 = this;\n\n      if (this.kw.length === 0) return; //将搜索的关键词保存到历史纪录里\n\n      this.history.push(this.kw);\n      setTimeout(function () {\n        _this2.$router.push({\n          path: \"/search_result/\".concat(_this2.kw)\n        });\n      }, 0);\n    },\n    //点击联想列表跳转\n    suggestClick: function suggestClick(item) {\n      var _this3 = this;\n\n      this.history.push(item);\n      setTimeout(function () {\n        _this3.$router.push({\n          path: \"/search_result/\".concat(item)\n        });\n      }, 0);\n    },\n    //点击历史记录跳转\n    historyClick: function historyClick(item) {\n      this.$router.push({\n        path: \"/search_result/\".concat(item)\n      });\n    }\n  },\n  //利用监听器将history的变化保存在本地\n  watch: {\n    history: {\n      deep: true,\n      handler: function handler() {\n        //立即覆盖式的保存在本地\n        //本地存储只能存储字符串类型，所以需要用json来转换\n        //因为多次输入同一个关键词会被重复记录，所以需要去重\n        var theSet = new Set(this.history);\n        localStorage.setItem('his', JSON.stringify(this.history));\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,SACAA,cADA,QAEA,gBAFA;AAGA;AACA;EACAC,IADA,kBACA;IACA;MACAC,MADA;MACA;MACAC,WAFA;MAEA;MACAC,eAHA;MAGA;MACAC,sDAJA,CAIA;;IAJA;EAMA,CARA;EASAC;IACA;IACAC,OAFA,qBAEA;MAAA;;MACA;MACAC;MAEA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA,MACA,qBADA;kBAAA;kBAAA;gBAAA;;gBAAA;;cAAA;gBAAA;gBAAA,OAKAR;kBACAS;gBADA,EALA;;cAAA;gBAAA;gBAIAC,GAJA,yBAIAT,IAJA;gBAQA;;cARA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,KASA,GATA;IAUA,CAhBA;IAiBA;IACAU,OAlBA,mBAkBAC,GAlBA,EAkBAC,MAlBA,EAkBA;MACA;MACA;MACA;MACA;MACA;QACA;MACA,CAFA;IAGA,CA1BA;IA2BA;IACAC,QA5BA,sBA4BA;MAAA;;MACA,iCADA,CAEA;;MACA;MACAC;QACA;UACAC;QADA;MAGA,CAJA,EAIA,CAJA;IAMA,CAtCA;IAuCA;IACAC,YAxCA,wBAwCAC,IAxCA,EAwCA;MAAA;;MACA;MACAH;QACA;UACAC;QADA;MAGA,CAJA,EAIA,CAJA;IAMA,CAhDA;IAiDA;IACAG,YAlDA,wBAkDAD,IAlDA,EAkDA;MACA;QACAF;MADA;IAGA;EAtDA,CATA;EAiEA;EACAI;IACAf;MACAgB,UADA;MAEAC,OAFA,qBAEA;QACA;QACA;QACA;QACA;QACAC;MACA;IARA;EADA;AAlEA","names":["suggestListAPI","data","kw","timer","keywordList","history","methods","inputFn","clearTimeout","keyword","res","lightFn","str","target","searchFn","setTimeout","path","suggestClick","item","historyClick","watch","deep","handler","localStorage"],"sourceRoot":"src/views/search","sources":["index.vue"],"sourcesContent":["// 搜索页面\r\n<template>\r\n  <div>\r\n    <!-- 搜索头部 -->\r\n    <div class=\"search-header\" style=\"height: 46px\">\r\n      <van-icon name=\"arrow-left\" color=\"white\" size=\"18px\" class=\"goback\" @click=\"$router.go(-1)\"\r\n        style=\"padding-left: 14px\" />\r\n      <van-search placeholder=\"请输入关键词\" background=\"#007bff\" shape=\"round\" v-fofo @input=\"inputFn\" v-model=\"kw\"\r\n        @search=\"searchFn\" />\r\n    </div>\r\n    <!-- 搜索关键词联想列表 -->\r\n    <div class=\"sugg-list\">\r\n      <div class=\"sugg-item\" v-for=\"(item,index) in keywordList\" :key=\"index\" v-if=\"kw.length!==0\"\r\n        v-html=\"lightFn(item, kw)\" @click=\"suggestClick(item)\">\r\n      </div>\r\n    </div>\r\n    <!-- 搜索历史 -->\r\n    <div class=\"search-history\" v-show=\"kw.length===0\">\r\n      <!-- 标题 -->\r\n      <van-cell title=\"搜索历史\">\r\n        <template #right-icon>\r\n          <van-icon name=\"delete\" class=\"search-icon\"></van-icon>\r\n        </template>\r\n      </van-cell>\r\n      <!-- 历史列表 -->\r\n      <div class=\"history-list\">\r\n        <span class=\"history-item\" v-for=\"(item,index) in history\" @click=\"historyClick(item)\">{{item}}</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import {\r\n    suggestListAPI\r\n  } from \"@/api/index.js\"\r\n  import router from '@/router'\r\n  export default {\r\n    data() {\r\n      return {\r\n        kw: '', //搜索关键词\r\n        timer: null, //定时器\r\n        keywordList: [], //关键词联想数组\r\n        history: JSON.parse(localStorage.getItem('his')) || [] //利用json转换为数组对象格式\r\n      }\r\n    },\r\n    methods: {\r\n      //搜索框输入方法\r\n      inputFn() {\r\n        //防抖(设置定时器，然后每次触发时清除定时器)\r\n        clearTimeout(this.timer)\r\n\r\n        this.timer = setTimeout(async () => {\r\n          if (this.kw.length === 0) return\r\n\r\n          const {\r\n            data: res\r\n          } = await suggestListAPI({\r\n            keyword: this.kw\r\n          })\r\n          this.keywordList = res.data.options\r\n        }, 300)\r\n      },\r\n      //处理关键词高亮\r\n      lightFn(str, target) {\r\n        //str是原来的字符串\r\n        //target是关键字\r\n        //变量不能直接放入正则表达式中，需要新建正则实例\r\n        let reg = new RegExp(target, 'ig')\r\n        return str.replaceAll(reg, (match) => {\r\n          return `<span style=\"color:red;\">${match}</span>`\r\n        })\r\n      },\r\n      //搜索事件\r\n      searchFn() {\r\n        if (this.kw.length === 0) return\r\n        //将搜索的关键词保存到历史纪录里\r\n        this.history.push(this.kw)\r\n        setTimeout(() => {\r\n          this.$router.push({\r\n            path: `/search_result/${this.kw}`,\r\n          })\r\n        }, 0)\r\n\r\n      },\r\n      //点击联想列表跳转\r\n      suggestClick(item) {\r\n        this.history.push(item)\r\n        setTimeout(() => {\r\n          this.$router.push({\r\n            path: `/search_result/${item}`,\r\n          })\r\n        }, 0)\r\n\r\n      },\r\n      //点击历史记录跳转\r\n      historyClick(item) {\r\n        this.$router.push({\r\n          path: `/search_result/${item}`,\r\n        })\r\n      }\r\n    },\r\n    //利用监听器将history的变化保存在本地\r\n    watch: {\r\n      history: {\r\n        deep: true,\r\n        handler() {\r\n          //立即覆盖式的保存在本地\r\n          //本地存储只能存储字符串类型，所以需要用json来转换\r\n          //因为多次输入同一个关键词会被重复记录，所以需要去重\r\n          const theSet = new Set(this.history)\r\n          localStorage.setItem('his', JSON.stringify(this.history))\r\n        }\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n  .search-header {\r\n    display: flex;\r\n    align-items: center;\r\n    background-color: #007bff;\r\n    overflow: hidden;\r\n\r\n    .van-search {\r\n      flex: 1;\r\n    }\r\n  }\r\n\r\n  .sugg-list {\r\n    .sugg-item {\r\n      padding: 0 15Px;\r\n      border-bottom: 1Px solid #f8f8f8;\r\n      font-size: 14Px;\r\n      line-height: 50Px;\r\n      white-space: nowrap;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n    }\r\n  }\r\n\r\n  .search-icon {\r\n    font-size: 16Px;\r\n    line-height: inherit;\r\n  }\r\n\r\n  .history-list {\r\n    padding: 0 10Px;\r\n\r\n    .history-item {\r\n      display: inline-block;\r\n      font-size: 12Px;\r\n      padding: 8Px 14Px;\r\n      background-color: #efefef;\r\n      margin: 10Px 8Px 0Px 8Px;\r\n      border-radius: 10Px;\r\n    }\r\n  }\r\n</style>"]},"metadata":{},"sourceType":"module"}