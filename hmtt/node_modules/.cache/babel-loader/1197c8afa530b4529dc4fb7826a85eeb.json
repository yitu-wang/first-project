{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/\\u5C0F\\u738B/Desktop/heimamm/hmtt/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/\\u5C0F\\u738B/Desktop/heimamm/hmtt/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _get = require(\"C:/Users/\\u5C0F\\u738B/Desktop/heimamm/hmtt/node_modules/@babel/runtime/helpers/get.js\").default;\n\nvar _getPrototypeOf = require(\"C:/Users/\\u5C0F\\u738B/Desktop/heimamm/hmtt/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\n\nvar _inherits = require(\"C:/Users/\\u5C0F\\u738B/Desktop/heimamm/hmtt/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/\\u5C0F\\u738B/Desktop/heimamm/hmtt/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nrequire(\"core-js/modules/es.array.concat.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StrictEventEmitter = void 0;\n\nvar Emitter = require(\"component-emitter\");\n/**\n * Strictly typed version of an `EventEmitter`. A `TypedEventEmitter` takes type\n * parameters for mappings of event names to event data types, and strictly\n * types method calls to the `EventEmitter` according to these event maps.\n *\n * @typeParam ListenEvents - `EventsMap` of user-defined events that can be\n * listened to with `on` or `once`\n * @typeParam EmitEvents - `EventsMap` of user-defined events that can be\n * emitted with `emit`\n * @typeParam ReservedEvents - `EventsMap` of reserved events, that can be\n * emitted by socket.io with `emitReserved`, and can be listened to with\n * `listen`.\n */\n\n\nvar StrictEventEmitter = /*#__PURE__*/function (_Emitter) {\n  _inherits(StrictEventEmitter, _Emitter);\n\n  var _super = _createSuper(StrictEventEmitter);\n\n  function StrictEventEmitter() {\n    _classCallCheck(this, StrictEventEmitter);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(StrictEventEmitter, [{\n    key: \"on\",\n    value:\n    /**\n     * Adds the `listener` function as an event listener for `ev`.\n     *\n     * @param ev Name of the event\n     * @param listener Callback function\n     */\n    function on(ev, listener) {\n      _get(_getPrototypeOf(StrictEventEmitter.prototype), \"on\", this).call(this, ev, listener);\n\n      return this;\n    }\n    /**\n     * Adds a one-time `listener` function as an event listener for `ev`.\n     *\n     * @param ev Name of the event\n     * @param listener Callback function\n     */\n\n  }, {\n    key: \"once\",\n    value: function once(ev, listener) {\n      _get(_getPrototypeOf(StrictEventEmitter.prototype), \"once\", this).call(this, ev, listener);\n\n      return this;\n    }\n    /**\n     * Emits an event.\n     *\n     * @param ev Name of the event\n     * @param args Values to send to listeners of this event\n     */\n\n  }, {\n    key: \"emit\",\n    value: function emit(ev) {\n      var _get2;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      (_get2 = _get(_getPrototypeOf(StrictEventEmitter.prototype), \"emit\", this)).call.apply(_get2, [this, ev].concat(args));\n\n      return this;\n    }\n    /**\n     * Emits a reserved event.\n     *\n     * This method is `protected`, so that only a class extending\n     * `StrictEventEmitter` can emit its own reserved events.\n     *\n     * @param ev Reserved event name\n     * @param args Arguments to emit along with the event\n     */\n\n  }, {\n    key: \"emitReserved\",\n    value: function emitReserved(ev) {\n      var _get3;\n\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      (_get3 = _get(_getPrototypeOf(StrictEventEmitter.prototype), \"emit\", this)).call.apply(_get3, [this, ev].concat(args));\n\n      return this;\n    }\n    /**\n     * Returns the listeners listening to an event.\n     *\n     * @param event Event name\n     * @returns Array of listeners subscribed to `event`\n     */\n\n  }, {\n    key: \"listeners\",\n    value: function listeners(event) {\n      return _get(_getPrototypeOf(StrictEventEmitter.prototype), \"listeners\", this).call(this, event);\n    }\n  }]);\n\n  return StrictEventEmitter;\n}(Emitter);\n\nexports.StrictEventEmitter = StrictEventEmitter;","map":{"version":3,"names":["Object","defineProperty","exports","value","StrictEventEmitter","Emitter","require","ev","listener","args","event"],"sources":["C:/Users/小王/Desktop/heimamm/hmtt/node_modules/socket.io-client/build/typed-events.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StrictEventEmitter = void 0;\nconst Emitter = require(\"component-emitter\");\n/**\n * Strictly typed version of an `EventEmitter`. A `TypedEventEmitter` takes type\n * parameters for mappings of event names to event data types, and strictly\n * types method calls to the `EventEmitter` according to these event maps.\n *\n * @typeParam ListenEvents - `EventsMap` of user-defined events that can be\n * listened to with `on` or `once`\n * @typeParam EmitEvents - `EventsMap` of user-defined events that can be\n * emitted with `emit`\n * @typeParam ReservedEvents - `EventsMap` of reserved events, that can be\n * emitted by socket.io with `emitReserved`, and can be listened to with\n * `listen`.\n */\nclass StrictEventEmitter extends Emitter {\n    /**\n     * Adds the `listener` function as an event listener for `ev`.\n     *\n     * @param ev Name of the event\n     * @param listener Callback function\n     */\n    on(ev, listener) {\n        super.on(ev, listener);\n        return this;\n    }\n    /**\n     * Adds a one-time `listener` function as an event listener for `ev`.\n     *\n     * @param ev Name of the event\n     * @param listener Callback function\n     */\n    once(ev, listener) {\n        super.once(ev, listener);\n        return this;\n    }\n    /**\n     * Emits an event.\n     *\n     * @param ev Name of the event\n     * @param args Values to send to listeners of this event\n     */\n    emit(ev, ...args) {\n        super.emit(ev, ...args);\n        return this;\n    }\n    /**\n     * Emits a reserved event.\n     *\n     * This method is `protected`, so that only a class extending\n     * `StrictEventEmitter` can emit its own reserved events.\n     *\n     * @param ev Reserved event name\n     * @param args Arguments to emit along with the event\n     */\n    emitReserved(ev, ...args) {\n        super.emit(ev, ...args);\n        return this;\n    }\n    /**\n     * Returns the listeners listening to an event.\n     *\n     * @param event Event name\n     * @returns Array of listeners subscribed to `event`\n     */\n    listeners(event) {\n        return super.listeners(event);\n    }\n}\nexports.StrictEventEmitter = StrictEventEmitter;\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kBAAR,GAA6B,KAAK,CAAlC;;AACA,IAAMC,OAAO,GAAGC,OAAO,CAAC,mBAAD,CAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMF,kB;;;;;;;;;;;;;;IACF;AACJ;AACA;AACA;AACA;AACA;IACI,YAAGG,EAAH,EAAOC,QAAP,EAAiB;MACb,2EAASD,EAAT,EAAaC,QAAb;;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,cAAKD,EAAL,EAASC,QAAT,EAAmB;MACf,6EAAWD,EAAX,EAAeC,QAAf;;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,cAAKD,EAAL,EAAkB;MAAA;;MAAA,kCAANE,IAAM;QAANA,IAAM;MAAA;;MACd,qGAAWF,EAAX,SAAkBE,IAAlB;;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,sBAAaF,EAAb,EAA0B;MAAA;;MAAA,mCAANE,IAAM;QAANA,IAAM;MAAA;;MACtB,qGAAWF,EAAX,SAAkBE,IAAlB;;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,mBAAUC,KAAV,EAAiB;MACb,yFAAuBA,KAAvB;IACH;;;;EApD4BL,O;;AAsDjCH,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B"},"metadata":{},"sourceType":"script"}