{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/\\u5C0F\\u738B/Desktop/heimamm/hmtt/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/\\u5C0F\\u738B/Desktop/heimamm/hmtt/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n//基于axios封装网络请求\nimport theAxios from 'axios'; //因为要用到this.router，但是js文件中没有this实例，所以要引入router\n\nimport router from '@/router';\nimport { Notify } from 'vant';\nimport { getToken, setToken } from './token';\nimport { freshTokenAPI } from '@/api/index.js';\nvar axios = theAxios.create({\n  baseURL: 'http://toutiao.itheima.net/',\n  timeout: 20000 //20s无响应直接判定超时\n\n}); // 添加请求拦截器\n\naxios.interceptors.request.use(function (config) {\n  var _getToken;\n\n  // 在发送请求之前做些什么\n  //判断本地的token，并且判断是否携带请求体\n  if (((_getToken = getToken()) === null || _getToken === void 0 ? void 0 : _getToken.length) > 0 && config.headers.Authorization === undefined) {\n    config.headers.Authorization = \"Bearer \".concat(getToken());\n  }\n\n  return config;\n}, function (error) {\n  // 对请求错误做些什么\n  return Promise.reject(error);\n}); // 添加响应拦截器\n\naxios.interceptors.response.use(function (response) {\n  // 2xx 范围内的状态码都会触发该函数。\n  // 对响应数据做点什么\n  return response;\n}, /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(error) {\n    var res;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(error.response.status === 401)) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 3;\n            return freshTokenAPI();\n\n          case 3:\n            res = _context.sent;\n            setToken(res.data.data.token);\n            return _context.abrupt(\"return\", axios(error.config));\n\n          case 6:\n            return _context.abrupt(\"return\", Promise.reject(error));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\nexport default (function (_ref2) {\n  var url = _ref2.url,\n      _ref2$method = _ref2.method,\n      method = _ref2$method === void 0 ? 'GET' : _ref2$method,\n      _ref2$params = _ref2.params,\n      params = _ref2$params === void 0 ? {} : _ref2$params,\n      _ref2$data = _ref2.data,\n      data = _ref2$data === void 0 ? {} : _ref2$data,\n      _ref2$headers = _ref2.headers,\n      headers = _ref2$headers === void 0 ? {} : _ref2$headers;\n  return axios({\n    url: url,\n    method: method,\n    params: params,\n    data: data,\n    headers: headers\n  });\n});","map":{"version":3,"names":["theAxios","router","Notify","getToken","setToken","freshTokenAPI","axios","create","baseURL","timeout","interceptors","request","use","config","length","headers","Authorization","undefined","error","Promise","reject","response","status","res","data","token","url","method","params"],"sources":["C:/Users/小王/Desktop/heimamm/hmtt/src/utils/request.js"],"sourcesContent":["//基于axios封装网络请求\r\nimport theAxios from 'axios'\r\n//因为要用到this.router，但是js文件中没有this实例，所以要引入router\r\nimport router from '@/router'\r\nimport { Notify } from 'vant'\r\nimport { getToken, setToken } from './token'\r\nimport { freshTokenAPI } from '@/api/index.js'\r\nconst axios = theAxios.create({\r\n  baseURL: 'http://toutiao.itheima.net/',\r\n  timeout: 20000, //20s无响应直接判定超时\r\n})\r\n// 添加请求拦截器\r\naxios.interceptors.request.use(\r\n  function (config) {\r\n    // 在发送请求之前做些什么\r\n    //判断本地的token，并且判断是否携带请求体\r\n    if (getToken()?.length > 0 && config.headers.Authorization === undefined) {\r\n      config.headers.Authorization = `Bearer ${getToken()}`\r\n    }\r\n    return config\r\n  },\r\n  function (error) {\r\n    // 对请求错误做些什么\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n// 添加响应拦截器\r\naxios.interceptors.response.use(\r\n  function (response) {\r\n    // 2xx 范围内的状态码都会触发该函数。\r\n    // 对响应数据做点什么\r\n    return response\r\n  },\r\n  async function (error) {\r\n    // 超出 2xx 范围的状态码都会触发该函数。\r\n    // 对响应错误做点什么\r\n    if (error.response.status === 401) {\r\n      //被注释的代码是之前的方式,表示当token过期,直接清空并跳转登录页\r\n      // delToken()\r\n      // Notify({ type: 'warning', message: '需要进行登录' })\r\n      // router.replace('/login')\r\n      //接下来是新的方式,表示当token过期时直接更新的新的token\r\n      const res = await freshTokenAPI()\r\n      setToken(res.data.data.token)\r\n      return axios(error.config)\r\n    }\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport default ({\r\n  url,\r\n  method = 'GET',\r\n  params = {},\r\n  data = {},\r\n  headers = {},\r\n}) => {\r\n  return axios({\r\n    url,\r\n    method,\r\n    params,\r\n    data,\r\n    headers,\r\n  })\r\n}\r\n"],"mappings":";;;AAAA;AACA,OAAOA,QAAP,MAAqB,OAArB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,SAAnC;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,IAAMC,KAAK,GAAGN,QAAQ,CAACO,MAAT,CAAgB;EAC5BC,OAAO,EAAE,6BADmB;EAE5BC,OAAO,EAAE,KAFmB,CAEZ;;AAFY,CAAhB,CAAd,C,CAIA;;AACAH,KAAK,CAACI,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACE,UAAUC,MAAV,EAAkB;EAAA;;EAChB;EACA;EACA,IAAI,cAAAV,QAAQ,YAAR,8CAAYW,MAAZ,IAAqB,CAArB,IAA0BD,MAAM,CAACE,OAAP,CAAeC,aAAf,KAAiCC,SAA/D,EAA0E;IACxEJ,MAAM,CAACE,OAAP,CAAeC,aAAf,oBAAyCb,QAAQ,EAAjD;EACD;;EACD,OAAOU,MAAP;AACD,CARH,EASE,UAAUK,KAAV,EAAiB;EACf;EACA,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAZH,E,CAcA;;AACAZ,KAAK,CAACI,YAAN,CAAmBW,QAAnB,CAA4BT,GAA5B,CACE,UAAUS,QAAV,EAAoB;EAClB;EACA;EACA,OAAOA,QAAP;AACD,CALH;EAAA,sEAME,iBAAgBH,KAAhB;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,MAGMA,KAAK,CAACG,QAAN,CAAeC,MAAf,KAA0B,GAHhC;cAAA;cAAA;YAAA;;YAAA;YAAA,OASsBjB,aAAa,EATnC;;UAAA;YASUkB,GATV;YAUInB,QAAQ,CAACmB,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcC,KAAf,CAAR;YAVJ,iCAWWnB,KAAK,CAACY,KAAK,CAACL,MAAP,CAXhB;;UAAA;YAAA,iCAaSM,OAAO,CAACC,MAAR,CAAeF,KAAf,CAbT;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CANF;;EAAA;IAAA;EAAA;AAAA;AAuBA,gBAAe,iBAMT;EAAA,IALJQ,GAKI,SALJA,GAKI;EAAA,yBAJJC,MAII;EAAA,IAJJA,MAII,6BAJK,KAIL;EAAA,yBAHJC,MAGI;EAAA,IAHJA,MAGI,6BAHK,EAGL;EAAA,uBAFJJ,IAEI;EAAA,IAFJA,IAEI,2BAFG,EAEH;EAAA,0BADJT,OACI;EAAA,IADJA,OACI,8BADM,EACN;EACJ,OAAOT,KAAK,CAAC;IACXoB,GAAG,EAAHA,GADW;IAEXC,MAAM,EAANA,MAFW;IAGXC,MAAM,EAANA,MAHW;IAIXJ,IAAI,EAAJA,IAJW;IAKXT,OAAO,EAAPA;EALW,CAAD,CAAZ;AAOD,CAdD"},"metadata":{},"sourceType":"module"}