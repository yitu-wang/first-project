{"ast":null,"code":"//基于axios封装网络请求\nimport theAxios from 'axios'; //因为要用到this.router，但是js文件中没有this实例，所以要引入router\n\nimport router from '@/router';\nimport Notify from '@/ui/Notify.js';\nimport { getToken, setToken, delToken } from './token';\nimport { freshTokenAPI } from '@/api/index.js';\nconst axios = theAxios.create({\n  baseURL: 'http://toutiao.itheima.net/',\n  timeout: 20000 //20s无响应直接判定超时\n\n}); // 添加请求拦截器\n\naxios.interceptors.request.use(function (config) {\n  // 在发送请求之前做些什么\n  //判断本地的token，并且判断是否携带请求体\n  if (getToken()?.length > 0 && config.headers.Authorization === undefined) {\n    config.headers.Authorization = `Bearer ${getToken()}`;\n  }\n\n  return config;\n}, function (error) {\n  // 对请求错误做些什么\n  return Promise.reject(error);\n}); // 添加响应拦截器\n\naxios.interceptors.response.use(function (response) {\n  // 2xx 范围内的状态码都会触发该函数。\n  // 对响应数据做点什么\n  return response;\n}, async function (error) {\n  // 超出 2xx 范围的状态码都会触发该函数。\n  // 对响应错误做点什么\n  if (error.response.status === 401) {\n    //被注释的代码是之前的方式,表示当token过期,直接清空并跳转登录页\n    // delToken()\n    // Notify({ type: 'warning', message: '需要进行登录' })\n    // router.replace('/login')\n    //接下来是新的方式,表示当token过期时直接更新的新的token\n    const res = await freshTokenAPI();\n    setToken(res.data.data.token);\n    error.config.headers.Authorization = 'Bearer ' + res.data.data.token;\n    return axios(error.config);\n  } else if (error.response.status === 500 && error.config.url === '/v1_0/authorizations' && error.config.method === 'put') {\n    //刷新的token也过期了,必须再次登录\n    localStorage.clear(); //清除本地所有的值\n\n    localStorage.setItem('hash', location.hash);\n    Notify({\n      type: 'warning',\n      message: '需要进行登录'\n    });\n    router.replace('/login');\n  }\n\n  return Promise.reject(error);\n});\nexport default (({\n  url,\n  method = 'GET',\n  params = {},\n  data = {},\n  headers = {}\n}) => {\n  return axios({\n    url,\n    method,\n    params,\n    data,\n    headers\n  });\n});","map":{"version":3,"names":["theAxios","router","Notify","getToken","setToken","delToken","freshTokenAPI","axios","create","baseURL","timeout","interceptors","request","use","config","length","headers","Authorization","undefined","error","Promise","reject","response","status","res","data","token","url","method","localStorage","clear","setItem","location","hash","type","message","replace","params"],"sources":["C:/Users/小王/Desktop/heimamm/hmtt/src/utils/request.js"],"sourcesContent":["//基于axios封装网络请求\r\nimport theAxios from 'axios'\r\n//因为要用到this.router，但是js文件中没有this实例，所以要引入router\r\nimport router from '@/router'\r\nimport  Notify  from '@/ui/Notify.js'\r\nimport { getToken, setToken, delToken } from './token'\r\nimport { freshTokenAPI } from '@/api/index.js'\r\nconst axios = theAxios.create({\r\n  baseURL: 'http://toutiao.itheima.net/',\r\n  timeout: 20000, //20s无响应直接判定超时\r\n})\r\n// 添加请求拦截器\r\naxios.interceptors.request.use(\r\n  function (config) {\r\n    // 在发送请求之前做些什么\r\n    //判断本地的token，并且判断是否携带请求体\r\n    if (getToken()?.length > 0 && config.headers.Authorization === undefined) {\r\n      config.headers.Authorization = `Bearer ${getToken()}`\r\n    }\r\n    return config\r\n  },\r\n  function (error) {\r\n    // 对请求错误做些什么\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n// 添加响应拦截器\r\naxios.interceptors.response.use(\r\n  function (response) {\r\n    // 2xx 范围内的状态码都会触发该函数。\r\n    // 对响应数据做点什么\r\n    return response\r\n  },\r\n  async function (error) {\r\n    // 超出 2xx 范围的状态码都会触发该函数。\r\n    // 对响应错误做点什么\r\n    if (error.response.status === 401) {\r\n      //被注释的代码是之前的方式,表示当token过期,直接清空并跳转登录页\r\n      // delToken()\r\n      // Notify({ type: 'warning', message: '需要进行登录' })\r\n      // router.replace('/login')\r\n      //接下来是新的方式,表示当token过期时直接更新的新的token\r\n      const res = await freshTokenAPI()\r\n      setToken(res.data.data.token)\r\n      error.config.headers.Authorization = 'Bearer ' + res.data.data.token\r\n      return axios(error.config)\r\n    } else if (\r\n      error.response.status === 500 &&\r\n      error.config.url === '/v1_0/authorizations' &&\r\n      error.config.method === 'put'\r\n    ) {\r\n      //刷新的token也过期了,必须再次登录\r\n      localStorage.clear() //清除本地所有的值\r\n      localStorage.setItem('hash', location.hash)\r\n      Notify({ type: 'warning', message: '需要进行登录' })\r\n      router.replace('/login')\r\n    }\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport default ({\r\n  url,\r\n  method = 'GET',\r\n  params = {},\r\n  data = {},\r\n  headers = {},\r\n}) => {\r\n  return axios({\r\n    url,\r\n    method,\r\n    params,\r\n    data,\r\n    headers,\r\n  })\r\n}\r\n"],"mappings":"AAAA;AACA,OAAOA,QAAP,MAAqB,OAArB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAQC,MAAR,MAAqB,gBAArB;AACA,SAASC,QAAT,EAAmBC,QAAnB,EAA6BC,QAA7B,QAA6C,SAA7C;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,MAAMC,KAAK,GAAGP,QAAQ,CAACQ,MAAT,CAAgB;EAC5BC,OAAO,EAAE,6BADmB;EAE5BC,OAAO,EAAE,KAFmB,CAEZ;;AAFY,CAAhB,CAAd,C,CAIA;;AACAH,KAAK,CAACI,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACE,UAAUC,MAAV,EAAkB;EAChB;EACA;EACA,IAAIX,QAAQ,IAAIY,MAAZ,GAAqB,CAArB,IAA0BD,MAAM,CAACE,OAAP,CAAeC,aAAf,KAAiCC,SAA/D,EAA0E;IACxEJ,MAAM,CAACE,OAAP,CAAeC,aAAf,GAAgC,UAASd,QAAQ,EAAG,EAApD;EACD;;EACD,OAAOW,MAAP;AACD,CARH,EASE,UAAUK,KAAV,EAAiB;EACf;EACA,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAZH,E,CAcA;;AACAZ,KAAK,CAACI,YAAN,CAAmBW,QAAnB,CAA4BT,GAA5B,CACE,UAAUS,QAAV,EAAoB;EAClB;EACA;EACA,OAAOA,QAAP;AACD,CALH,EAME,gBAAgBH,KAAhB,EAAuB;EACrB;EACA;EACA,IAAIA,KAAK,CAACG,QAAN,CAAeC,MAAf,KAA0B,GAA9B,EAAmC;IACjC;IACA;IACA;IACA;IACA;IACA,MAAMC,GAAG,GAAG,MAAMlB,aAAa,EAA/B;IACAF,QAAQ,CAACoB,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcC,KAAf,CAAR;IACAP,KAAK,CAACL,MAAN,CAAaE,OAAb,CAAqBC,aAArB,GAAqC,YAAYO,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcC,KAA/D;IACA,OAAOnB,KAAK,CAACY,KAAK,CAACL,MAAP,CAAZ;EACD,CAVD,MAUO,IACLK,KAAK,CAACG,QAAN,CAAeC,MAAf,KAA0B,GAA1B,IACAJ,KAAK,CAACL,MAAN,CAAaa,GAAb,KAAqB,sBADrB,IAEAR,KAAK,CAACL,MAAN,CAAac,MAAb,KAAwB,KAHnB,EAIL;IACA;IACAC,YAAY,CAACC,KAAb,GAFA,CAEqB;;IACrBD,YAAY,CAACE,OAAb,CAAqB,MAArB,EAA6BC,QAAQ,CAACC,IAAtC;IACA/B,MAAM,CAAC;MAAEgC,IAAI,EAAE,SAAR;MAAmBC,OAAO,EAAE;IAA5B,CAAD,CAAN;IACAlC,MAAM,CAACmC,OAAP,CAAe,QAAf;EACD;;EACD,OAAOhB,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CA/BH;AAkCA,gBAAe,CAAC;EACdQ,GADc;EAEdC,MAAM,GAAG,KAFK;EAGdS,MAAM,GAAG,EAHK;EAIdZ,IAAI,GAAG,EAJO;EAKdT,OAAO,GAAG;AALI,CAAD,KAMT;EACJ,OAAOT,KAAK,CAAC;IACXoB,GADW;IAEXC,MAFW;IAGXS,MAHW;IAIXZ,IAJW;IAKXT;EALW,CAAD,CAAZ;AAOD,CAdD"},"metadata":{},"sourceType":"module"}